#include "tsetwlog.h"

// GUID generated by https://blogs.msdn.microsoft.com/dcook/2015/09/08/etw-provider-names-and-guids/
TRACELOGGING_DEFINE_PROVIDER(
	g_hMyProvider,
	"tsserverEventSource",
	// {ac4e9dd1-3a7a-5022-fc37-f2394bc4f09e}
	(0xac4e9dd1, 0x3a7a, 0x5022, 0xfc, 0x37, 0xf2, 0x39, 0x4b, 0xc4, 0xf0, 0x9e));

namespace demo {
	constexpr size_t STRING_ARG_BUFFER_SIZE = 1024;

	void InitEtw() {
		TraceLoggingRegister(g_hMyProvider);
	}

	bool GetStringsFromArgs(napi_env env, napi_callback_info cb_info, size_t count, wchar_t* pArg1, wchar_t* pArg2)
	{
		napi_status status;
		size_t argCount = count;
		napi_value thisArg;
		void *pData;
		napi_valuetype valueType;
		size_t written;

		// Note: Increase these values and update conditions below to support more than 2 string args
		// (And if more than 2, should probably convert into an indexed loop and pass string pointers as an array)
		napi_value result[2];
		if (count > 2) return false; // Only supports up to two args currently

		status = napi_get_cb_info(env, cb_info, &argCount, result, &thisArg, &pData);
		if (status != napi_ok || argCount < count) return false;

		status = napi_typeof(env, result[0], &valueType);
		if (status != napi_ok || valueType != napi_valuetype::napi_string) return false;
		if (count >= 2)
		{
			status = napi_typeof(env, result[1], &valueType);
			if (status != napi_ok || valueType != napi_valuetype::napi_string) return false;
		}

		status = napi_get_value_string_utf16(env, result[0], (char16_t*)pArg1, STRING_ARG_BUFFER_SIZE, &written);
		if (status != napi_ok) return false;
		if (count >= 2)
		{
			status = napi_get_value_string_utf16(env, result[1], (char16_t*)pArg2, STRING_ARG_BUFFER_SIZE, &written);
			if (status != napi_ok) return false;
		}

		return true;
	}

	TraceLoggingThreadActivity<g_hMyProvider> *cmdActivity = nullptr;

	napi_value LogEvent(napi_env env, napi_callback_info args) {
		if (!TraceLoggingProviderEnabled(g_hMyProvider, /* any level */0, /* any keywords */0))
		{
			return nullptr;
		}

		wchar_t pMsg[STRING_ARG_BUFFER_SIZE];
		if (!GetStringsFromArgs(env, args, 1, pMsg, nullptr)) return nullptr;

		TraceLoggingWrite(g_hMyProvider,
			"Message",
			TraceLoggingLevel(WINEVENT_LEVEL_VERBOSE), // Level is optional
			//TraceLoggingKeyword(0x10),               // Keywords are optional
			TraceLoggingWideString(pMsg, "msg")
		);

		return nullptr;
	}

	napi_value LogStartCommand(napi_env env, napi_callback_info args) {
		if (!TraceLoggingProviderEnabled(g_hMyProvider, /* any level */0, /* any keywords */0))
		{
			return nullptr;
		}

		wchar_t pMsg[STRING_ARG_BUFFER_SIZE];
		wchar_t pCmd[STRING_ARG_BUFFER_SIZE];
		if (!GetStringsFromArgs(env, args, 2, pMsg, pCmd)) return nullptr;

		cmdActivity = new TraceLoggingThreadActivity<g_hMyProvider>();

		TraceLoggingWriteStart(*cmdActivity, "Command",
			TraceLoggingWideString(pCmd, "command"),
			TraceLoggingWideString(pMsg, "msg")
		);

		return nullptr;
	}

	napi_value LogStopCommand(napi_env env, napi_callback_info args) {
		if (cmdActivity == nullptr) return nullptr;

		if (!TraceLoggingProviderEnabled(g_hMyProvider, /* any level */0, /* any keywords */0))
		{
			return nullptr;
		}

		wchar_t pMsg[STRING_ARG_BUFFER_SIZE];
		wchar_t pCmd[STRING_ARG_BUFFER_SIZE];
		if (!GetStringsFromArgs(env, args, 2, pMsg, pCmd)) return nullptr;

		TraceLoggingWriteStop(*cmdActivity, "Command",
			TraceLoggingWideString(pCmd, "command"),
			TraceLoggingWideString(pMsg, "msg")
		);

		delete cmdActivity;
		cmdActivity = nullptr;
		return nullptr;
	}
}
